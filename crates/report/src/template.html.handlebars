<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Contender Report</title>

  <!--

    (¬Ø`¬∑¬Ø`¬∑.¬∏¬∏.¬∑¬¥¬Ø`¬∑.¬∏¬∏.¬∑¬¥¬Ø`¬∑¬∑¬¥¬Ø)
    ( \                       / )
     ( ) Design by @deadpine ( ) 
      (/                     \)  
       (.¬∑¬¥¬Ø`¬∑.¬∏¬∏.¬∑¬¥¬Ø`¬∑.¬∏¬∏.¬∑¬¥)

    -->
  
  <style>
    @font-face {
      font-family: 'CMU-Serif';
      src: url('https://fonts.cdnfonts.com/s/19926/cmunbx.woff') format('woff');
      font-style: normal;
      font-weight: bold;
      font-stretch: normal;
    }
    @font-face {
      font-family: 'CMU-Serif';
      src: url('https://fonts.cdnfonts.com/s/19926/cmunci.woff') format('woff');
      font-style: italic;
      font-weight: 400; 
      font-stretch: normal;
    }
    @font-face {
      font-family: 'CMU-Serif';
      src: url('https://fonts.cdnfonts.com/s/19926/cmunrm.woff') format('woff');
      font-style: normal;
      font-weight: 400; 
      font-stretch: normal;
    }

    * {
      box-sizing: border-box;
    }

    body,
    html {
      padding: 0;
      margin: 0;
    }

    body {
      font-family: 'CMU-Serif', serif;
      overflow-x: hidden;
      display: flex;
      flex-direction: column;
      align-items: center;
      color: #0D0D0D;
    }

    header {
      padding: 4rem 1rem 2rem;
      text-align: center;
    }

    header p {
      margin: 0;
      line-height: 1.6;
    }

    header p:first-of-type {
      margin-bottom: 1rem;
    }
    
    section {
      width: 100%;
      max-width: 40rem;
      padding: 2rem 1rem;
    }

    h1 {
      color: #0D0D0D;
      text-align: center;
      font-size: 2.5rem;
      font-style: normal;
      font-weight: 500;
      line-height: 1.2;
    }

    h2 {
      font-size: 1.1rem;
      text-align: center;
      text-transform: uppercase;
      padding: 1rem 0 .5rem;
    }

    a {
      color: blue;
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }

    .source {
      display: block;
      width: 100%;
      padding: .5rem;
      text-align: center;
      font-style: italic;
    }

    img {
      max-width: 100%;
    }

    .metrics {
      display: flex; 
      justify-content: space-between;
      margin-top: 2rem;
    }

    .metrics p b {
      font-size: 1.1rem;
    }

    .label {
      font-size: .9rem;
      font-style: italic;
      color: #3c3c3c;
    }
    
    table {
      width: 100%;
    }

    th {
      text-align: left;
      font-weight: bold;
      line-height: 1.8;
      border-bottom: solid 1px #d7d7d7;
    }

    td {
      line-height: 1.5;
    }

    footer p {
      text-align: center;
      font-size: .9rem;
      padding: 1rem;
    }

    .chart {
      width: 100%;
      height: 420px;
    }
  </style>

</head>

<body>
  <header>
    <h1>Flashbots <br /> Chain Performance Report</h1>
    <p><i>{{data.date}}</i></p>
    <br />
    <p>Scenario: {{data.scenario_name}}</p>
    <p>Block Range: {{data.start_block}} - {{data.end_block}}</p>
    <a href="{{data.rpc_url}}" target="_blank">
      <p>Target Chain</p>
    </a>
  </header>

  <section>
    <h2>Chain Metrics</h2>
      <div style="display: flex; justify-content: space-between;">
        <div>
          <h4>‚õΩ</h4>
          <p>Peak Gas Usage Per Block:</p>
          <p><b>{{data.metrics.peak_gas.value}} gas</b>
            - <span class="label">{{data.metrics.peak_gas.description}}</span>
          </p>
        </div>
        <div>
          <h4>üóÉÔ∏è</h4>
          <p>Peak Txs Per Block:</p>
          <p><b>{{data.metrics.peak_tx_count.value}} txs</b>
            <!-- - <span class="label">medium</span> -->
          </p>
        </div>
        <div>
          <h4>‚è≥</h4>
          <p>Average Block Time:</p>
          <p><b>{{data.metrics.average_block_time_secs.value}} seconds</b>
            - <span class="label">{{data.metrics.average_block_time_secs.description}}</span>
          </p>
        </div>
      </div>
  </section>

  <section>
    <h2>RPC Response Latency</h2>
    <table>
      <thead>
        <tr>
          <th>Method</th>
          <th>p50 (ms)</th>
          <th>p90 (ms)</th>
          <th>p99 (ms)</th>
        </tr>
      </thead>
      <tbody>
        {{#each data.metrics.latency_quantiles}}
        <tr>
          <td>{{this.method}}</td>
          <td>{{this.p50}}</td>
          <td>{{this.p90}}</td>
          <td>{{this.p99}}</td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </section>


  <section>
    <h2>Runtime Parameters</h2>
    <table>
      <thead>
        <tr>
          <th>Txs Per Duration</th>
          <th>Run Duration</th>
          <th>Timeout</th>
        </tr>
      </thead>
      <tbody>
        {{#each data.metrics.runtime_params}}
        <tr>
          <td>{{this.txs_per_duration}}</td>
          <td>{{this.duration_value}} {{this.duration_unit}}</td>
          <td>{{this.timeout}} {{this.duration_unit}}</td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </section>

  <section>
    <h2>Storage Slot Updates</h2>
    <div class="chart" id="heatmap"></div>
  </section>
  <section>
    <h2>Gas Per Block</h2>
    <div class="chart" id="gas-per-block"></div>
  </section>

  {{#each data.charts}}
  <section>
    <h2>
      {{this.0}}
    </h2>
    <img src="{{this.1}}" alt="{{this.0}}">
    <div style="page-break-after: always;"></div>
  </section>
  {{/each}}

  <footer>
    <p>Flashbots 2025 ¬©</p>
  </footer>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.6.0/echarts.min.js" integrity="sha512-XSmbX3mhrD2ix5fXPTRQb2FwK22sRMVQTpBP2ac8hX7Dh/605hA2QDegVWiAvZPiXIxOV0CbkmUjGionDpbCmw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script type="text/javascript">
    // Ensure echarts is loaded
    if (typeof echarts === 'undefined') {
      throw new Error('ECharts library is not loaded. Please include the ECharts script.');
    }

    function roundTo (num, roundness) {
      num + (roundness - (num % roundness))
    }

    async function renderHeatmap() {
      // Initialize the echarts instance based on the prepared dom
      var chart = echarts.init(document.getElementById('heatmap'));

      const blocks = {{data.chart_data.heatmap.blocks}};
      const storageSlots = [
        {{#each data.chart_data.heatmap.slots}}"{{this}}"{{#if @last}}{{else}}, {{/if}}{{/each}}
      ]
      .map(slot => `0x${slot.slice(0,4)}...${slot.slice(-4)}`);
      const data = {{data.chart_data.heatmap.matrix}};
  
      // Specify the configuration items and data for the chart
      var option = {
        tooltip: {
          position: 'top'
        },
        grid: {
          height: '70%',
          top: '0%',
          left: '15%',
          right: '0%',
        },
        xAxis: {
          type: 'category',
          data: blocks,
          splitArea: {
            show: true
          },
        },
        yAxis: {
          type: 'category',
          data: storageSlots,
          splitArea: {
            show: true
          },
        },
        visualMap: {
          min: 0,
          max: {{data.chart_data.heatmap.max_accesses}},
          calculable: true,
          orient: 'horizontal',
          left: 'center',
          bottom: '0%',
        },
        series: [{
          name: 'Storage Slot Writes',
          type: 'heatmap',
          data: data,
          label: {
            show: true,
            formatter: function (params) {
              return params.value[2] > 0 ? params.value[2] : '-';
            }
          },
          emphasis: {
            itemStyle: {
              shadowBlur: 10,
              shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
          }
        }]
      };

      // Display the chart using the configuration items and data just specified.
      chart.setOption(option);
    }

    async function renderGasPerBlock() {
      // Initialize the echarts instance based on the prepared dom
      var chart = echarts.init(document.getElementById('gas-per-block'));

      const blocks = {{data.chart_data.gas_per_block.blocks}};
      const gasValues = {{data.chart_data.gas_per_block.gas_used}};

      // Specify the configuration items and data for the chart
      const roundTo = (num, roundness) => {
        num + (roundness - (num % roundness))
      }
      var option = {
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross'
          }
        },
        xAxis: {
          type: 'category',
          data: blocks,
          boundaryGap: false
        },
        yAxis: {
          type: 'value',
          name: 'Gas Used',
          min: 0,
          max: roundTo({{data.chart_data.gas_per_block.max_gas_used}}, 500000),
        },
        series: [{
          name: 'Gas Used',
          type: 'line',
          data: gasValues,
          smooth: true,
          lineStyle: {
            width: 2
          }
        }]
      };

      // Display the chart using the configuration items and data just specified.
      chart.setOption(option);
    }

    Promise.all([
      renderHeatmap(),
      renderGasPerBlock(),
      // Add any other chart-rendering functions here
    ]).then(() => {
      console.log('All charts rendered');
    });

  </script>

</body>


</html>