use crate::default_scenarios::contracts::SPAM_ME;
use clap::ValueEnum;
use contender_core::generator::types::{FunctionCallDefinition, SpamRequest};

#[derive(ValueEnum, Clone, Debug)]
// TODO: support all opcodes in SpamMe contract,
//       then uncomment the opcodes below.
pub enum EthereumOpcode {
    // STOP,
    Add,
    Mul,
    Sub,
    Div,
    // Sdiv,
    // Mod,
    // Smod,
    // Addmod,
    // Mulmod,
    // Exp,
    // Signextend,
    // Lt,
    // Gt,
    // Slt,
    // Sgt,
    // Eq,
    // Iszero,
    // And,
    // Or,
    // Xor,
    // Not,
    // Byte,
    // Shl,
    // Shr,
    // Sar,
    // Sha3,
    // Address,
    Balance,
    // Origin,
    Caller,
    // Callvalue,
    // Calldataload,
    // Calldatasize,
    // Calldatacopy,
    // Codesize,
    // Codecopy,
    // Gasprice,
    // Extcodesize,
    // Extcodecopy,
    // Returndatasize,
    // Returndatacopy,
    // Extcodehash,
    // Blockhash,
    // Coinbase,
    // Timestamp,
    // Number,
    // Difficulty,
    // Prevrandao,
    // Gaslimit,
    // Chainid,
    // Selfbalance,
    // Basefee,
    // Pop,
    Mload,
    Mstore,
    // Mstore8,
    Sload,
    Sstore,
    // Jump,
    // Jumpi,
    // Pc,
    // Msize,
    // Gas,
    // Jumpdest,
    // Push1,
    // Push2,
    // Push3,
    // Push4,
    // Push5,
    // Push6,
    // Push7,
    // Push8,
    // Push9,
    // Push10,
    // Push11,
    // Push12,
    // Push13,
    // Push14,
    // Push15,
    // Push16,
    // Push17,
    // Push18,
    // Push19,
    // Push20,
    // Push21,
    // Push22,
    // Push23,
    // Push24,
    // Push25,
    // Push26,
    // Push27,
    // Push28,
    // Push29,
    // Push30,
    // Push31,
    // Push32,
    // Dup1,
    // Dup2,
    // Dup3,
    // Dup4,
    // Dup5,
    // Dup6,
    // Dup7,
    // Dup8,
    // Dup9,
    // Dup10,
    // Dup11,
    // Dup12,
    // Dup13,
    // Dup14,
    // Dup15,
    // Dup16,
    // Swap1,
    // Swap2,
    // Swap3,
    // Swap4,
    // Swap5,
    // Swap6,
    // Swap7,
    // Swap8,
    // Swap9,
    // Swap10,
    // Swap11,
    // Swap12,
    // Swap13,
    // Swap14,
    // Swap15,
    // Swap16,
    // Log0,
    // Log1,
    // Log2,
    // Log3,
    // Log4,
    // Create,
    // Call,
    // Callcode,
    // Return,
    // Delegatecall,
    // Create2,
    // Staticcall,
    // Revert,
    // Invalid,
    // Selfdestruct,
}

pub fn opcode_txs(args: &[EthereumOpcode], num_iterations: u64) -> Vec<SpamRequest> {
    args.iter()
        .map(|opcode| {
            SpamRequest::Tx(FunctionCallDefinition {
                to: SPAM_ME.template_name(),
                signature: Some("consumeGas(string memory method, uint256 iterations)".to_string()),
                args: vec![
                    format!("{opcode:?}").to_lowercase(),
                    num_iterations.to_string(),
                ]
                .into(),
                value: None,
                from: None,
                from_pool: Some("spammers".to_owned()),
                fuzz: None,
                kind: Some("opcodes".to_owned()),
                gas_limit: None,
            })
        })
        .collect()
}
