use crate::default_scenarios::eth_functions::CONTRACT_NAME;
use clap::ValueEnum;
use contender_core::generator::types::{FunctionCallDefinition, SpamRequest};

#[derive(ValueEnum, Clone, Debug)]
// TODO: support all opcodes in SpamMe contract,
//       then uncomment the opcodes below.
pub enum EthereumOpcode {
    // STOP,
    ADD,
    MUL,
    SUB,
    DIV,
    // SDIV,
    // MOD,
    // SMOD,
    // ADDMOD,
    // MULMOD,
    // EXP,
    // SIGNEXTEND,
    // LT,
    // GT,
    // SLT,
    // SGT,
    // EQ,
    // ISZERO,
    // AND,
    // OR,
    // XOR,
    // NOT,
    // BYTE,
    // SHL,
    // SHR,
    // SAR,
    // SHA3,
    // ADDRESS,
    BALANCE,
    // ORIGIN,
    CALLER,
    // CALLVALUE,
    // CALLDATALOAD,
    // CALLDATASIZE,
    // CALLDATACOPY,
    // CODESIZE,
    // CODECOPY,
    // GASPRICE,
    // EXTCODESIZE,
    // EXTCODECOPY,
    // RETURNDATASIZE,
    // RETURNDATACOPY,
    // EXTCODEHASH,
    // BLOCKHASH,
    // COINBASE,
    // TIMESTAMP,
    // NUMBER,
    // DIFFICULTY,
    // PREVRANDAO,
    // GASLIMIT,
    // CHAINID,
    // SELFBALANCE,
    // BASEFEE,
    // POP,
    MLOAD,
    MSTORE,
    // MSTORE8,
    SLOAD,
    SSTORE,
    // JUMP,
    // JUMPI,
    // PC,
    // MSIZE,
    // GAS,
    // JUMPDEST,
    // PUSH1,
    // PUSH2,
    // PUSH3,
    // PUSH4,
    // PUSH5,
    // PUSH6,
    // PUSH7,
    // PUSH8,
    // PUSH9,
    // PUSH10,
    // PUSH11,
    // PUSH12,
    // PUSH13,
    // PUSH14,
    // PUSH15,
    // PUSH16,
    // PUSH17,
    // PUSH18,
    // PUSH19,
    // PUSH20,
    // PUSH21,
    // PUSH22,
    // PUSH23,
    // PUSH24,
    // PUSH25,
    // PUSH26,
    // PUSH27,
    // PUSH28,
    // PUSH29,
    // PUSH30,
    // PUSH31,
    // PUSH32,
    // DUP1,
    // DUP2,
    // DUP3,
    // DUP4,
    // DUP5,
    // DUP6,
    // DUP7,
    // DUP8,
    // DUP9,
    // DUP10,
    // DUP11,
    // DUP12,
    // DUP13,
    // DUP14,
    // DUP15,
    // DUP16,
    // SWAP1,
    // SWAP2,
    // SWAP3,
    // SWAP4,
    // SWAP5,
    // SWAP6,
    // SWAP7,
    // SWAP8,
    // SWAP9,
    // SWAP10,
    // SWAP11,
    // SWAP12,
    // SWAP13,
    // SWAP14,
    // SWAP15,
    // SWAP16,
    // LOG0,
    // LOG1,
    // LOG2,
    // LOG3,
    // LOG4,
    // CREATE,
    // CALL,
    // CALLCODE,
    // RETURN,
    // DELEGATECALL,
    // CREATE2,
    // STATICCALL,
    // REVERT,
    // INVALID,
    // SELFDESTRUCT,
}

pub fn opcode_txs(args: &[EthereumOpcode], num_iterations: u64) -> Vec<SpamRequest> {
    args.iter()
        .map(|opcode| {
            SpamRequest::Tx(FunctionCallDefinition {
                to: format!("{{{CONTRACT_NAME}}}"),
                signature: format!("consumeGas(string memory method, uint256 iterations)"),
                args: vec![
                    format!("{opcode:?}").to_lowercase(),
                    num_iterations.to_string(),
                ]
                .into(),
                value: None,
                from: None,
                from_pool: Some("spammers".to_owned()),
                fuzz: None,
                kind: Some("opcodes".to_owned()),
                gas_limit: None,
            })
        })
        .collect()
}
