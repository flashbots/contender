use crate::agent_controller::AgentStore;
use crate::buckets::Bucket;
use crate::db::{DbOps, NamedTx};
use crate::error::ContenderError;
use crate::generator::named_txs::ExecutionRequest;
use crate::generator::templater::Templater;
use crate::generator::types::AnyProvider;
use crate::generator::util::complete_tx_request;
use crate::generator::NamedTxRequest;
use crate::generator::{seeder::Seeder, types::PlanType, Generator, PlanConfig};
use crate::provider::{LoggingLayer, RPC_REQUEST_LATENCY_ID};
use crate::spammer::tx_actor::TxActorHandle;
use crate::spammer::{ExecutionPayload, OnBatchSent, OnTxSent, SpamTrigger};
use crate::Result;
use alloy::consensus::constants::{ETH_TO_WEI, GWEI_TO_WEI};
use alloy::consensus::{Transaction, TxType};
use alloy::eips::eip2718::Encodable2718;
use alloy::hex::ToHexExt;
use alloy::network::{AnyNetwork, AnyTxEnvelope, EthereumWallet, TransactionBuilder};
use alloy::node_bindings::Anvil;
use alloy::primitives::{keccak256, Address, FixedBytes, U256};
use alloy::providers::{DynProvider, PendingTransactionConfig, Provider, ProviderBuilder};
use alloy::rpc::client::ClientBuilder;
use alloy::rpc::types::TransactionRequest;
use alloy::serde::WithOtherFields;
use alloy::signers::local::{LocalSigner, PrivateKeySigner};
use alloy::transports::http::reqwest::Url;
use contender_bundle_provider::bundle_provider::new_basic_bundle;
use contender_bundle_provider::BundleClient;
use contender_engine_provider::AdvanceChain;
use futures::{Stream, StreamExt};
use std::collections::{BTreeMap, HashMap};
use std::ops::Deref;
use std::pin::Pin;
use std::str::FromStr;
use std::sync::Arc;
use std::time::Duration;
use tokio::sync::OnceCell;
use tokio_util::sync::CancellationToken;

type PrometheusCollector = (
    &'static OnceCell<prometheus::Registry>,
    &'static OnceCell<prometheus::HistogramVec>,
);

/// A test scenario can be used to run a test with a specific configuration, database, and RPC provider.
#[derive(Clone)]
pub struct TestScenario<D, S, P>
where
    D: DbOps + Send + Sync + 'static,
    S: Seeder,
    P: PlanConfig<String> + Templater<String> + Send + Sync,
{
    pub config: P,
    pub db: Arc<D>,
    pub rpc_url: Url,
    pub rpc_client: Arc<AnyProvider>,
    pub bundle_client: Option<Arc<BundleClient>>,
    pub builder_rpc_url: Option<Url>,
    pub rand_seed: S,
    /// Wallets explicitly given by the user
    pub wallet_map: HashMap<Address, EthereumWallet>,
    /// Wallets generated by the system
    pub agent_store: AgentStore,
    pub nonces: HashMap<Address, u64>,
    pub chain_id: u64,
    pub gas_limits: HashMap<FixedBytes<32>, u64>,
    pub msg_handle: Arc<TxActorHandle>,
    pub tx_type: TxType,
    pub gas_price_percent_add: u64,
    pub pending_tx_timeout_secs: u64,
    pub ctx: ExecutionContext,
    pub auth_provider: Option<Arc<dyn AdvanceChain + Send + Sync + 'static>>,
    prometheus: PrometheusCollector,
}

pub struct TestScenarioParams {
    pub rpc_url: Url,
    pub builder_rpc_url: Option<Url>,
    pub signers: Vec<PrivateKeySigner>,
    pub agent_store: AgentStore,
    pub tx_type: TxType,
    pub gas_price_percent_add: Option<u64>,
    pub pending_tx_timeout_secs: u64,
}

#[derive(Clone)]
pub struct ExecutionContext {
    /// Adds this amount of wei per gas to the gas price given to each transaction. May be negative to subtract gas.
    /// This is not the same as the `gas_price_percent_add`, which is a percentage of the gas price provided by the user.
    gas_price_adder: i128,
    /// The amount of time between blocks on the target chain.
    pub block_time_secs: u64,
    /// Tells us when to terminate async tasks.
    pub cancel_token: CancellationToken,
}

impl ExecutionContext {
    pub fn add_to_gas_price(&mut self, amount: i128) {
        self.gas_price_adder += amount;
    }
}

impl<D, S, P> TestScenario<D, S, P>
where
    D: DbOps + Send + Sync + 'static,
    S: Seeder + Send + Sync + Clone,
    P: PlanConfig<String> + Templater<String> + Send + Sync + Clone,
{
    pub async fn new(
        config: P,
        db: Arc<D>,
        rand_seed: S,
        params: TestScenarioParams,
        auth_provider: Option<Arc<dyn AdvanceChain + Send + Sync + 'static>>,
        prometheus: PrometheusCollector,
    ) -> Result<Self> {
        let TestScenarioParams {
            rpc_url,
            builder_rpc_url,
            signers,
            agent_store,
            tx_type,
            gas_price_percent_add,
            pending_tx_timeout_secs,
        } = params;

        // use custom logging layer to log sendRawTransaction request IDs
        let client = ClientBuilder::default()
            .layer(LoggingLayer::new(prometheus.0, prometheus.1).await)
            .http(rpc_url.to_owned());
        let rpc_client = Arc::new(DynProvider::new(
            ProviderBuilder::new()
                .network::<AnyNetwork>()
                .on_client(client),
        ));

        // derive block time from last two blocks. if two blocks don't exist, assume block time is 1s
        let block_num = rpc_client
            .get_block_number()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get block number"))?;
        let block_time_secs = if block_num > 0 {
            let mut timestamps = vec![];
            for i in [0_u64, 1] {
                let block = rpc_client
                    .get_block_by_number((block_num - i).into())
                    .await
                    .map_err(|e| ContenderError::with_err(e, "failed to get block"))?;
                if let Some(block) = block {
                    timestamps.push(block.header.timestamp);
                }
            }
            if timestamps.len() == 2 {
                (timestamps[0] - timestamps[1]).max(1)
            } else {
                1
            }
        } else {
            1
        };

        let mut wallet_map = HashMap::new();
        let wallets = signers.iter().map(|s| {
            let w = EthereumWallet::new(s.clone());
            (s.address(), w)
        });
        for (addr, wallet) in wallets {
            wallet_map.insert(addr, wallet);
        }
        for (name, signers) in agent_store.all_agents() {
            println!("adding '{name}' signers to wallet map");
            for signer in signers.signers.iter() {
                wallet_map.insert(signer.address(), EthereumWallet::new(signer.clone()));
            }
        }

        let chain_id = rpc_client
            .get_chain_id()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get chain id"))?;

        let mut nonces = HashMap::new();
        sync_nonces(&wallet_map, &mut nonces, &rpc_client).await?;

        let gas_limits = HashMap::new();

        let bundle_client = builder_rpc_url
            .as_ref()
            .map(|url| Arc::new(BundleClient::new(url.clone())));

        let msg_handle = Arc::new(TxActorHandle::new(120, db.clone(), rpc_client.clone()));
        let cancel_token = CancellationToken::new();

        Ok(Self {
            config,
            db: db.clone(),
            rpc_url: rpc_url.to_owned(),
            rpc_client,
            bundle_client,
            builder_rpc_url,
            rand_seed,
            wallet_map,
            agent_store,
            chain_id,
            nonces,
            gas_limits,
            msg_handle,
            tx_type,
            gas_price_percent_add: gas_price_percent_add.unwrap_or(0),
            pending_tx_timeout_secs,
            ctx: ExecutionContext {
                gas_price_adder: 0,
                block_time_secs,
                cancel_token,
            },
            auth_provider,
            prometheus,
        })
    }

    pub async fn sync_nonces(&mut self) -> Result<()> {
        sync_nonces(&self.wallet_map, &mut self.nonces, &self.rpc_client).await
    }

    pub async fn estimate_setup_cost(&self) -> Result<U256> {
        println!(
            "
================================================================================
================= running simulation to estimate setup cost ====================
================================================================================
"
        );
        // start anvil with dev accounts holding 1M eth
        let anvil = Anvil::new().args(["--balance", "1000000"]).spawn();
        let admin_signer = LocalSigner::from_str(
            "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80",
        )
        .expect("invalid signer");
        let admin_wallet = EthereumWallet::new(admin_signer.clone());
        // separate prometheus registry for simulations; anvil doesn't count!
        static PROM: OnceCell<prometheus::Registry> = OnceCell::const_new();
        static HIST: OnceCell<prometheus::HistogramVec> = OnceCell::const_new();
        let mut scenario = Self::new(
            self.config.to_owned(),
            self.db.clone(),
            self.rand_seed.to_owned(),
            TestScenarioParams {
                rpc_url: anvil.endpoint_url(),
                builder_rpc_url: None,
                signers: vec![admin_signer.to_owned()],
                agent_store: self.agent_store.clone(),
                tx_type: self.tx_type,
                gas_price_percent_add: Some(self.gas_price_percent_add), // will be 0 if not specified
                pending_tx_timeout_secs: self.pending_tx_timeout_secs,
            },
            None,
            (&PROM, &HIST),
        )
        .await?;

        let addresses = scenario
            .agent_store
            .all_signer_addresses()
            .into_iter()
            .collect::<Vec<Address>>();

        let fund_amount = if addresses.len() >= 999 {
            U256::from(999999 * ETH_TO_WEI / addresses.len() as u128)
        } else {
            U256::from(1000 * ETH_TO_WEI)
        };
        let start_balances: HashMap<Address, U256> =
            HashMap::from_iter(addresses.iter().map(|addr| (*addr, fund_amount)));

        let all_pools: Vec<String> = scenario
            .agent_store
            .all_agents()
            .map(|(name, _)| name.to_owned())
            .collect();
        for agent_name in all_pools {
            scenario
                .fund_agent_signers(agent_name, &admin_wallet, fund_amount)
                .await?;
        }

        scenario.deploy_contracts().await?;
        scenario.run_setup().await?;

        let mut total_cost = U256::ZERO;
        for (addr, start_balance) in &start_balances {
            let new_balance = scenario
                .rpc_client
                .get_balance(*addr)
                .await
                .map_err(|e| ContenderError::with_err(e, "failed to get balance"))?;
            if new_balance >= *start_balance {
                continue;
            }
            let cost = start_balance - new_balance;
            total_cost += cost;
        }

        println!(
            "
================================================================================
============================= simulation complete ==============================
================================================================================
"
        );

        Ok(total_cost)
    }

    /// Funds all signers in the agent with the given amount.
    /// Does not check if the agents are already funded.
    pub async fn fund_agent_signers(
        &mut self,
        agent_name: impl AsRef<str>,
        funder: &EthereumWallet,
        amount: U256,
    ) -> Result<()> {
        let addresses = self
            .agent_store
            .get_agent(&agent_name)
            .ok_or(ContenderError::SetupError(
                "agent not found",
                Some(agent_name.as_ref().to_owned()),
            ))?
            .all_addresses();
        let gas_price = self
            .rpc_client
            .get_gas_price()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get gas price"))?;

        for addr in addresses {
            let tx_req = TransactionRequest::default()
                .with_from(funder.default_signer().address())
                .with_to(addr)
                .with_value(amount);
            let (tx_req, _) = self
                .prepare_tx_request(&tx_req, gas_price + GWEI_TO_WEI as u128)
                .await?;
            let signed_tx = tx_req
                .build(funder)
                .await
                .map_err(|e| ContenderError::with_err(e, "failed to build funding tx"))?;
            let pending = self
                .rpc_client
                .send_tx_envelope(AnyTxEnvelope::Ethereum(signed_tx))
                .await
                .map_err(|e| ContenderError::with_err(e, "failed to send funding tx"))?;
            println!(
                "funded account {}, tx: {}",
                addr.encode_hex(),
                pending.tx_hash()
            );
        }

        Ok(())
    }

    pub async fn deploy_contracts(&mut self) -> Result<()> {
        let pub_provider = &self.rpc_client;
        let gas_price = pub_provider
            .get_gas_price()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get gas price"))?;
        let chain_id = pub_provider
            .get_chain_id()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get chain id"))?;

        // we do everything in the callback so no need to actually capture the returned txs
        self.load_txs(PlanType::Create(|tx_req| {
            /* callback */
            // copy data/refs from self before spawning the task
            let db = self.db.clone();
            let from = tx_req.tx.from.to_owned().ok_or(ContenderError::SetupError(
                "failed to get 'from' address",
                None,
            ))?;
            let wallet_conf = self
                .wallet_map
                .get(&from)
                .unwrap_or_else(|| panic!("couldn't find wallet for 'from' address {from}"))
                .to_owned();
            let wallet = ProviderBuilder::new()
                .wallet(wallet_conf)
                .network::<AnyNetwork>()
                .on_http(self.rpc_url.to_owned());

            println!(
                "deploying contract: {:?}",
                tx_req.name.as_ref().unwrap_or(&"".to_string())
            );
            let rpc_url = self.rpc_url.to_owned();
            let tx_type = self.tx_type;
            let handle = tokio::task::spawn(async move {
                // estimate gas limit
                let gas_limit = wallet
                    .estimate_gas(WithOtherFields::new(tx_req.tx.to_owned()))
                    .await
                    .expect("failed to estimate gas");

                // inject missing fields into tx_req.tx
                let mut tx = tx_req.tx;
                complete_tx_request(&mut tx, tx_type, gas_price, gas_price / 10, gas_limit, chain_id);

                let res = wallet.send_transaction(WithOtherFields::new(tx)).await;
                if let Err(err) = res {
                    let err = err.to_string();
                    if err.to_lowercase().contains("already known") {
                        eprintln!("Transaction already known. You may be using the same seed (or private key) as another spammer. Try modifying seed with `-s`, or waiting if you set `-p`. JSON-RPC Error: {err:?}");
                    } else if err.to_lowercase().contains("insufficient funds") {
                        eprintln!(
                            "Insufficient funds for transaction (account: {from}). Try passing a funded private key with `-p`. JSON-RPC Error: {err:?}"
                        );
                    } else if err.to_lowercase().contains("replacement transaction underpriced") {
                        eprintln!("Replacement transaction underpriced. You may have to wait, or replace the currently-pending transactions manually. JSON-RPC Error: {err:?}");
                    } else {
                        eprintln!("failed to send tx: {err:?}");
                    }
                    return;
                }
                let res =
                    res.expect("this will never happen. If it does, I'm a terrible programmer.");
                let receipt = res.get_receipt().await.expect("failed to get receipt");
                println!(
                    "contract address: {}",
                    receipt.contract_address.unwrap_or_default()
                );
                db.insert_named_txs(
                    &[NamedTx::new(
                        tx_req.name.unwrap_or_default(),
                        receipt.transaction_hash,
                        receipt.contract_address,
                    )],
                    rpc_url.as_str(),
                )
                .expect("failed to insert tx into db");
            });
            Ok(Some(handle))
        }))
        .await?;

        self.sync_nonces().await?;

        Ok(())
    }

    pub async fn run_setup(&mut self) -> Result<()> {
        self.load_txs(PlanType::Setup(|tx_req| {
            /* callback */
            println!("{}", self.format_setup_log(&tx_req));

            // copy data/refs from self before spawning the task
            let from = tx_req.tx.from.as_ref().ok_or(ContenderError::SetupError(
                "failed to get 'from' address",
                None,
            ))?;
            let wallet = self
                .wallet_map
                .get(from)
                .ok_or(ContenderError::SetupError(
                    "couldn't find private key for address",
                    from.encode_hex().into(),
                ))?
                .to_owned();
            let db = self.db.clone();
            let rpc_url = self.rpc_url.clone();
            let tx_type = self.tx_type;

            let handle = tokio::task::spawn(async move {
                let wallet = ProviderBuilder::new()
                    .wallet(wallet)
                    .on_http(rpc_url.to_owned());

                let chain_id = wallet.get_chain_id().await.expect("failed to get chain id");
                let tx_label = tx_req
                    .name
                    .as_deref()
                    .or(tx_req.kind.as_deref())
                    .unwrap_or("")
                    .to_string();
                let gas_price = wallet.get_gas_price().await.unwrap_or_else(|_| {
                    panic!("failed to get gas price for setup step '{tx_label}'")
                });
                let gas_limit = if let Some(gas) = tx_req.tx.gas {
                    gas
                } else {
                    wallet
                        .estimate_gas(tx_req.tx.to_owned())
                        .await
                        .unwrap_or_else(|_| {
                            panic!("failed to estimate gas for setup step '{tx_label}'")
                        })
                };
                let mut tx = tx_req.tx;
                complete_tx_request(
                    &mut tx,
                    tx_type,
                    gas_price,
                    gas_price / 10,
                    gas_limit,
                    chain_id,
                );

                // wallet will assign nonce before sending
                let res = wallet
                    .send_transaction(tx)
                    .await
                    .unwrap_or_else(|_| panic!("failed to send setup tx '{tx_label}'"));

                // get receipt using provider (not wallet) to allow any receipt type (support non-eth chains)
                let receipt = res
                    .get_receipt()
                    .await
                    .unwrap_or_else(|_| panic!("failed to get receipt for tx '{tx_label}'"));

                if let Some(name) = tx_req.name {
                    db.insert_named_txs(
                        &[NamedTx::new(
                            name,
                            receipt.transaction_hash,
                            receipt.contract_address,
                        )],
                        rpc_url.as_str(),
                    )
                    .expect("failed to insert tx into db");
                }
            });
            Ok(Some(handle))
        }))
        .await?;

        self.sync_nonces().await?;

        Ok(())
    }

    pub async fn prepare_tx_request(
        &mut self,
        tx_req: &TransactionRequest,
        gas_price: u128,
    ) -> Result<(TransactionRequest, EthereumWallet)> {
        let from = tx_req.from.ok_or(ContenderError::SetupError(
            "missing 'from' address in tx request",
            None,
        ))?;
        let nonce = self
            .nonces
            .get(&from)
            .ok_or(ContenderError::SetupError(
                "missing nonce for 'from' address",
                Some(from.to_string()),
            ))?
            .to_owned();
        self.nonces.insert(from.to_owned(), nonce + 1);

        let key = keccak256(tx_req.input.input.to_owned().unwrap_or_default());

        if let std::collections::hash_map::Entry::Vacant(_) = self.gas_limits.entry(key) {
            let gas_limit = if let Some(gas) = tx_req.gas {
                gas
            } else {
                self.rpc_client
                    .estimate_gas(WithOtherFields::new(tx_req.to_owned()))
                    .await
                    .map_err(|e| ContenderError::with_err(e, "failed to estimate gas for tx"))?
            };
            self.gas_limits.insert(key, gas_limit);
        }
        let gas_limit = self
            .gas_limits
            .get(&key)
            .ok_or(ContenderError::SetupError(
                "failed to lookup gas limit",
                None,
            ))?
            .to_owned();
        let signer = self
            .wallet_map
            .get(&from)
            .ok_or(ContenderError::SetupError(
                "failed to get signer from scenario wallet_map",
                None,
            ))?
            .to_owned();

        let mut full_tx = tx_req.to_owned().with_nonce(nonce);
        complete_tx_request(
            &mut full_tx,
            self.tx_type,
            gas_price,
            gas_price / 10,
            gas_limit,
            self.chain_id,
        );

        Ok((full_tx, signer))
    }

    pub async fn prepare_spam(
        &mut self,
        tx_requests: &[ExecutionRequest],
    ) -> Result<Vec<ExecutionPayload>> {
        let gas_price = self
            .rpc_client
            .get_gas_price()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get gas price"))?;
        let gas_price = gas_price + ((gas_price * self.gas_price_percent_add as u128) / 100);
        let gas_price = if self.ctx.gas_price_adder < 0 {
            gas_price - self.ctx.gas_price_adder.unsigned_abs()
        } else {
            gas_price + self.ctx.gas_price_adder as u128
        };
        let mut payloads = vec![];
        println!("preparing {} spam payloads", tx_requests.len());
        for tx in tx_requests {
            let payload = match tx {
                ExecutionRequest::Bundle(reqs) => {
                    if self.bundle_client.is_none() {
                        return Err(ContenderError::SpamError(
                            "Bundle client not found. Specify a builder url to send bundles.",
                            None,
                        ));
                    }

                    // prepare each tx in the bundle (increment nonce, set gas price, etc)
                    let mut bundle_txs = vec![];

                    for req in reqs {
                        let (tx_req, signer) = self
                            .prepare_tx_request(&req.tx, gas_price)
                            .await
                            .map_err(|e| ContenderError::with_err(e, "failed to prepare tx"))?;

                        println!("bundle tx from {:?}", tx_req.from);
                        // sign tx
                        let tx_envelope = tx_req.build(&signer).await.map_err(|e| {
                            ContenderError::with_err(e, "bad request: failed to build tx")
                        })?;

                        bundle_txs.push(tx_envelope);
                    }
                    ExecutionPayload::SignedTxBundle(bundle_txs, reqs.to_owned())
                }
                ExecutionRequest::Tx(req) => {
                    let (tx_req, signer) = self
                        .prepare_tx_request(&req.tx, gas_price)
                        .await
                        .map_err(|e| ContenderError::with_err(e, "failed to prepare tx"))?;
                    let mut new_req = req.to_owned();
                    new_req.tx = tx_req.to_owned();

                    // sign tx
                    let tx_envelope = tx_req.build(&signer).await.map_err(|e| {
                        ContenderError::with_err(e, "bad request: failed to build tx")
                    })?;

                    // log tx details
                    let priority_fee = new_req
                        .tx
                        .max_priority_fee_per_gas
                        .map(|f| format!(" priority_fee: {f},"))
                        .unwrap_or_default();
                    println!(
                        "prepared tx: {}, from: {}, to: {:?}, input: {}, value={}, gas_limit: {}, gas_price: {},{priority_fee} nonce={}",
                        tx_envelope.tx_hash(),
                        new_req.tx.from.map(|s| s.encode_hex()).unwrap_or_default(),
                        tx_envelope.to(),
                        new_req.tx
                            .input
                            .input
                            .as_ref()
                            .map(|s| s.encode_hex())
                            .unwrap_or_default(),
                        new_req.tx
                            .value
                            .map(|s| s.to_string())
                            .unwrap_or("0".to_owned()),
                        new_req.tx
                            .gas
                            .map(|g| g.to_string())
                            .unwrap_or("N/A".to_owned()),
                        new_req.tx.gas_price.unwrap_or(new_req.tx.max_fee_per_gas.unwrap_or(0)),
                        new_req.tx.nonce.map(|n| n.to_string()).unwrap_or("N/A".to_owned())
                    );

                    ExecutionPayload::SignedTx(Box::new(tx_envelope), new_req)
                }
            };
            payloads.push(payload);
        }
        println!("prepared {} payloads", payloads.len());
        Ok(payloads)
    }

    /// Send one batch of spam txs evenly over one second.
    async fn execute_spam(
        &mut self,
        trigger: SpamTrigger,
        payloads: Vec<ExecutionPayload>,
        callback_handler: Arc<impl OnTxSent + OnBatchSent + Send + Sync + 'static>,
        context_handler: SpamContextHandler,
    ) -> Result<Vec<tokio::task::JoinHandle<()>>> {
        // sort payloads by nonce
        let mut payloads = payloads;
        payloads.sort_by(|a, b| {
            let a_nonce = match a {
                ExecutionPayload::SignedTx(_, req) => req.tx.nonce,
                ExecutionPayload::SignedTxBundle(_, reqs) => reqs[0].tx.nonce,
            };
            let b_nonce = match b {
                ExecutionPayload::SignedTx(_, req) => req.tx.nonce,
                ExecutionPayload::SignedTxBundle(_, reqs) => reqs[0].tx.nonce,
            };
            a_nonce.cmp(&b_nonce)
        });

        let num_payloads = payloads.len();

        let mut tasks: Vec<tokio::task::JoinHandle<()>> = vec![];

        // spawn at regular interval
        let micros_per_task = 1_000_000 / num_payloads.max(1) as u64;

        // takes gas to add to the gas price for the next batch (if needed)
        let gas_sender = Arc::new(context_handler.add_gas);
        // counts number of txs that were sent successfully
        let success_sender = Arc::new(context_handler.success_send_tx);
        for payload in payloads {
            let rpc_client = self.rpc_client.clone();
            let bundle_client = self.bundle_client.clone();
            let callback_handler = callback_handler.clone();
            let tx_handler = self.msg_handle.clone();
            let gas_sender = gas_sender.clone();
            let success_sender = success_sender.clone();
            let cancel_token = self.ctx.cancel_token.clone();

            std::thread::sleep(Duration::from_micros(micros_per_task));
            tasks.push(tokio::task::spawn(async move {
                let mut extra = HashMap::new();
                let start_timestamp = std::time::SystemTime::now()
                    .duration_since(std::time::UNIX_EPOCH)
                    .expect("time went backwards")
                    .as_millis();
                extra.insert("start_timestamp".to_owned(), start_timestamp.to_string());
                let handles = match payload {
                    ExecutionPayload::SignedTx(signed_tx, req) => {
                        let tx_hash = signed_tx.tx_hash().to_owned();
                        let res = rpc_client
                            .send_tx_envelope(AnyTxEnvelope::Ethereum(*signed_tx))
                            .await;

                        match res {
                            Ok(res) => {
                                let maybe_handle = callback_handler.on_tx_sent(
                                    res.into_inner(),
                                    &req,
                                    Some(extra),
                                    Some(tx_handler.clone()),
                                );

                                tokio::select! {
                                    _ = cancel_token.cancelled() => {
                                        return;
                                    }
                                    _ = success_sender
                                    .send(()) => {
                                        // wait for the task to finish
                                    }
                                };

                                vec![maybe_handle]
                            }
                            Err(e) => {
                                if let Some(err) = e.as_error_resp() {
                                    if err
                                        .message
                                        .to_lowercase()
                                        .contains("replacement transaction underpriced")
                                    {
                                        // send the current gas price / 10 to increase it by 10% for the next batch
                                        gas_sender
                                            .send(
                                                req.tx.max_fee_per_gas.unwrap_or(
                                                    req.tx.gas_price.unwrap_or(1_000_000_000),
                                                ) / 10,
                                            )
                                            .await
                                            .expect("failed to send gas update signal");
                                    }

                                    // include errored txs in the cache; user may want to retry them
                                    // if they are due to nonce issues, this will fail, but if they do land somehow,
                                    // they will be awaited in the post-spam loop
                                    println!("error from tx {tx_hash}: {err:?}");
                                    extra.insert("error".to_owned(), err.to_string());
                                    vec![callback_handler.on_tx_sent(
                                        PendingTransactionConfig::new(tx_hash),
                                        &req,
                                        Some(extra),
                                        Some(tx_handler.clone()),
                                    )]
                                } else {
                                    // ignore errors that can't be decoded
                                    println!("ignoring tx response, could not decode error: {e:?}");
                                    vec![]
                                }
                            }
                        }
                    }
                    ExecutionPayload::SignedTxBundle(signed_txs, reqs) => {
                        let mut bundle_txs = vec![];
                        for tx in &signed_txs {
                            let mut raw_tx = vec![];
                            tx.encode_2718(&mut raw_tx);
                            bundle_txs.push(raw_tx);
                        }
                        let block_num = match trigger {
                            SpamTrigger::BlockNumber(n) => n,
                            SpamTrigger::BlockHash(h) => {
                                let block = rpc_client
                                    .get_block_by_hash(h)
                                    .await
                                    .expect("failed to get block")
                                    .expect("block not found");
                                block.header.number
                            }
                            _ => rpc_client
                                .get_block_number()
                                .await
                                .expect("failed to get block number"),
                        };
                        let rpc_bundle = new_basic_bundle(
                            bundle_txs.into_iter().map(|b| b.into()).collect(),
                            block_num,
                        );
                        if let Some(bundle_client) = bundle_client {
                            println!("spamming bundle: {rpc_bundle:?}");
                            for i in 1..4 {
                                let mut rpc_bundle = rpc_bundle.clone();
                                rpc_bundle.block_number = block_num + i as u64;

                                let res = bundle_client.send_bundle(rpc_bundle).await;
                                if let Err(e) = res {
                                    println!("failed to send bundle: {e:?}");
                                }
                            }
                        } else {
                            panic!("bundle client not found");
                        }

                        let mut tx_handles = vec![];
                        for (tx, req) in signed_txs.into_iter().zip(reqs) {
                            let maybe_handle = callback_handler.on_tx_sent(
                                PendingTransactionConfig::new(*tx.tx_hash()),
                                &req,
                                Some(extra.clone()),
                                Some(tx_handler.clone()),
                            );
                            tx_handles.push(maybe_handle);
                        }
                        tx_handles
                    }
                };

                for handle in handles.into_iter().flatten() {
                    tokio::select! {
                        _ = cancel_token.cancelled() => {
                            println!("cancelled spammer task");
                            return;
                        }
                        _ = handle => {
                            // wait for the task to finish
                        }
                    }
                }
            }));
        }

        Ok(tasks)
    }

    /// Send spam batches until the cursor is depleted.
    pub async fn execute_spammer<F: OnTxSent + OnBatchSent + Send + Sync + 'static>(
        &mut self,
        cursor: &mut futures::stream::Take<Pin<Box<dyn Stream<Item = SpamTrigger> + Send>>>,
        tx_req_chunks: &[Vec<ExecutionRequest>],
        sent_tx_callback: Arc<F>,
    ) -> Result<()> {
        let mut tick = 0;
        while let Some(trigger) = cursor.next().await {
            let trigger = trigger.to_owned();
            // assign from addrs, nonces, and gas prices for this chunk of tx requests
            let payloads = self.prepare_spam(&tx_req_chunks[tick]).await?;
            let num_payloads = payloads.len();

            // initialize async context handlers
            let (success_sender, mut success_receiver) = tokio::sync::mpsc::channel(num_payloads);
            let (add_gas_sender, mut add_gas_receiver) = tokio::sync::mpsc::channel(num_payloads);
            let context = SpamContextHandler {
                success_send_tx: success_sender,
                add_gas: add_gas_sender,
            };

            // send this batch of spam txs
            let spam_tasks = self
                .execute_spam(trigger, payloads, sent_tx_callback.clone(), context)
                .await?;
            let mut num_tasks = spam_tasks.len();

            // wait for spam txs to finish sending
            for task in spam_tasks {
                tokio::select! {
                    res = task => {
                        if let Err(e) = res {
                            println!("spam task failed: {e:?}");
                            num_tasks -= 1;
                        }
                    },
                    _ = self.ctx.cancel_token.cancelled() => {
                        break;
                    }
                }
            }

            // wait for the on_batch_sent callback to finish
            if let Some(task) = sent_tx_callback.on_batch_sent() {
                task.await
                    .map_err(|e| ContenderError::with_err(e, "on_batch_sent callback failed"))?;
            }

            println!("[{tick}] executed {num_tasks} spam tasks");

            // increase gas price if needed
            add_gas_receiver.close();
            let starting_gas_adder = self.ctx.gas_price_adder;
            while let Some(gas) = add_gas_receiver.recv().await {
                if self.ctx.gas_price_adder >= gas as i128 + starting_gas_adder {
                    continue;
                }
                println!("incrementing gas price by {gas}");
                self.ctx.add_to_gas_price(gas as i128);
            }

            // decrease gas price if all txs were sent successfully
            success_receiver.close();
            let mut success_count = 0;
            while success_receiver.recv().await.is_some() {
                success_count += 1;
            }
            if success_count == num_payloads {
                println!("all spam txs sent successfully");
                if self.ctx.gas_price_adder > 0 {
                    // remove 10% of the gas price adder
                    self.ctx.add_to_gas_price(self.ctx.gas_price_adder / -10);
                }
            } else {
                println!(
                    "some spam txs failed to send: {} / {}",
                    num_payloads - success_count,
                    num_payloads
                );
            }

            // increment tick to get next chunk of txs
            tick += 1;
        }

        Ok(())
    }

    fn format_setup_log(&self, tx_req: &NamedTxRequest) -> String {
        let to_address = tx_req.tx.to.unwrap_or_default();
        let to_address = to_address.to();

        // lookup name of contract if it exists
        let to_name = to_address.map(|a| {
            let named_tx = self.db.get_named_tx_by_address(a);
            named_tx
                .map(|t| t.map(|tt| tt.name).unwrap_or_default())
                .unwrap_or_default()
        });

        format!(
            "running setup: from={} to={} {}",
            tx_req
                .tx
                .from
                .as_ref()
                .map(|a| a.encode_hex())
                .unwrap_or_default(),
            if let Some(to) = to_name {
                to
            } else {
                to_address.map(|a| a.encode_hex()).unwrap_or_default()
            },
            if let Some(kind) = &tx_req.kind {
                format!("kind={kind}")
            } else {
                "".to_string()
            },
        )
    }

    /// Returns the maximum cost of a single spam transaction by creating a new scenario
    /// and running estimateGas calls to estimate the cost of the spam transactions.
    pub async fn get_max_spam_cost(&self, user_signers: &[PrivateKeySigner]) -> Result<U256> {
        // separate prometheus registry for simulations; anvil doesn't count!
        static PROM: OnceCell<prometheus::Registry> = OnceCell::const_new();
        static HIST: OnceCell<prometheus::HistogramVec> = OnceCell::const_new();
        let mut scenario = TestScenario::new(
            self.config.to_owned(),
            self.db.clone(),
            self.rand_seed.clone(),
            TestScenarioParams {
                rpc_url: self.rpc_url.clone(),
                builder_rpc_url: self.builder_rpc_url.clone(),
                signers: user_signers.to_owned(),
                agent_store: self.agent_store.clone(),
                tx_type: self.tx_type,
                gas_price_percent_add: Some(self.gas_price_percent_add),
                pending_tx_timeout_secs: self.pending_tx_timeout_secs,
            },
            None,
            (&PROM, &HIST),
        )
        .await?;

        // load a sample of each spam tx from the scenario
        let txs = scenario
            .load_txs(PlanType::Spam(
                scenario
                    .config
                    .get_spam_steps()
                    .map(|s| s.len()) // take the number of spam txs from the testfile
                    .unwrap_or(0) as u64,
                |_named_req| {
                    // we can look at the named request here if needed
                    Ok(None)
                },
            ))
            .await?;
        let sample_txs = scenario
            .prepare_spam(&txs)
            .await?
            .iter()
            .map(|ex_payload| match ex_payload {
                ExecutionPayload::SignedTx(_envelope, tx_req) => vec![tx_req.to_owned()],
                ExecutionPayload::SignedTxBundle(_envelopes, tx_reqs) => tx_reqs
                    .iter()
                    .map(|tx| Box::new(tx.to_owned()))
                    .collect::<Vec<_>>(),
            })
            .collect::<Vec<_>>()
            .concat();

        let gas_price = scenario
            .rpc_client
            .get_gas_price()
            .await
            .map_err(|e| ContenderError::with_err(e, "failed to get gas price"))?;

        // get gas limit for each tx
        let mut prepared_sample_txs = vec![];
        for tx in sample_txs {
            let tx_req = tx.tx;
            let (prepared_req, _signer) = scenario.prepare_tx_request(&tx_req, gas_price).await?;
            prepared_sample_txs.push(prepared_req);
        }

        // get the highest gas cost of all spam txs
        let highest_gas_cost = prepared_sample_txs
            .iter()
            .map(|tx| {
                let mut gas_price = tx.max_fee_per_gas.unwrap_or(tx.gas_price.unwrap_or(0));
                if let Some(priority_fee) = tx.max_priority_fee_per_gas {
                    gas_price += priority_fee;
                }
                U256::from(gas_price * tx.gas.unwrap_or(0) as u128) + tx.value.unwrap_or(U256::ZERO)
            })
            .max()
            .ok_or(ContenderError::SpamError(
                "failed to get max gas cost for spam txs",
                None,
            ))?;

        // we assume the highest possible cost to minimize the chances of running out of ETH mid-test
        Ok(highest_gas_cost)
    }

    pub async fn get_spam_tx_chunks(
        &self,
        txs_per_period: u64,
        num_periods: u64,
    ) -> Result<Vec<Vec<ExecutionRequest>>> {
        let tx_requests = self
            .load_txs(crate::generator::PlanType::Spam(
                txs_per_period * num_periods,
                |_named_req| Ok(None), // we can look at the named request here if needed
            ))
            .await?;
        Ok(tx_requests
            .chunks(txs_per_period as usize)
            .map(|chunk| chunk.to_vec())
            .collect::<_>())
    }

    pub async fn flush_tx_cache(&self, block_start: u64, run_id: u64) -> Result<()> {
        let mut block_counter = 0;
        // the number of blocks to check for stalled txs
        let block_timeout = ((self.pending_tx_timeout_secs / self.ctx.block_time_secs) + 1)
            // must be at least 2 blocks because otherwise we have nothing to compare
            .max(2);
        let mut cache_size_queue = vec![];
        cache_size_queue.resize(block_timeout as usize, 1);
        loop {
            let pending_txs = self
                .msg_handle
                .flush_cache(run_id, block_start + block_counter as u64)
                .await
                .map_err(|e| ContenderError::with_err(e.deref(), "failed to flush cache"))?;
            cache_size_queue.rotate_right(1);
            cache_size_queue[0] = pending_txs.len();

            if pending_txs.is_empty() {
                break;
            }

            let current_timestamp = std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)
                .expect("time went backwards")
                .as_millis();

            // remove cached txs if the size hasn't changed for the last N blocks
            if cache_size_queue
                .iter()
                .all(|&size| size == cache_size_queue[0])
            {
                println!(
                            "Cache size has not changed for the last {block_timeout} blocks. Removing stalled txs...",
                        );
                for tx in &pending_txs {
                    // only remove txs that have been waiting for > T seconds
                    if current_timestamp
                        > (tx.start_timestamp + (self.pending_tx_timeout_secs * 1000)) as u128
                    {
                        self.msg_handle
                            .remove_cached_tx(tx.tx_hash)
                            .await
                            .map_err(|e| {
                                ContenderError::with_err(
                                    e.deref(),
                                    "failed to remove tx from cache",
                                )
                            })?;
                    }
                }
            }

            block_counter += 1;
        }

        Ok(())
    }

    pub async fn dump_tx_cache(&self, run_id: u64) -> Result<()> {
        println!("dumping tx cache...");

        let failed_txs = self
            .msg_handle
            .dump_cache(run_id)
            .await
            .map_err(|e| ContenderError::with_err(e.deref(), "failed to dump cache"))?;
        if !failed_txs.is_empty() {
            println!(
                "Failed to collect receipts for {} txs. Any valid txs sent may still land.",
                failed_txs.len()
            );
        }

        Ok(())
    }

    /// Collects latency metrics from the prometheus registry.
    /// Returns a map of RPC method names to a vector of latency buckets which represent (upper_bound_secs, cumulative_count).
    pub fn collect_latency_metrics(&self) -> BTreeMap<String, Vec<Bucket>> {
        let registry = self.prometheus.0.get();
        let mut latency_map = BTreeMap::new();
        if let Some(registry) = registry {
            let metric_families = registry.gather();

            for mf in &metric_families {
                if mf.name() == RPC_REQUEST_LATENCY_ID {
                    for m in mf.get_metric() {
                        let mut latencies: Vec<Bucket> = vec![];
                        if m.label.is_empty() {
                            continue;
                        }
                        let label = m.label.first().expect("label");
                        if label.name() != "rpc_method" {
                            continue;
                        }
                        let hist = m.get_histogram();
                        for bucket in &hist.bucket {
                            if bucket.cumulative_count.is_none() {
                                continue;
                            }
                            let upper_bound = bucket.upper_bound();
                            let cumulative_count =
                                bucket.cumulative_count.expect("cumulative_count");

                            latencies.push((upper_bound, cumulative_count).into());
                        }
                        latency_map.insert(label.value().to_string(), latencies);
                    }
                }
            }
        }
        latency_map
    }
}

async fn sync_nonces(
    wallet_map: &HashMap<Address, EthereumWallet>,
    nonces: &mut HashMap<Address, u64>,
    rpc_client: &AnyProvider,
) -> Result<()> {
    let all_addrs = wallet_map.keys().copied().collect::<Vec<Address>>();
    let mut tasks = vec![];
    let (sender, mut receiver) = tokio::sync::mpsc::channel::<(Address, u64)>(all_addrs.len() + 1);
    for addr in all_addrs {
        let send = sender.clone();
        let rpc_client = Arc::new(rpc_client.clone());
        tasks.push(tokio::task::spawn(async move {
            let nonce = rpc_client
                .get_transaction_count(addr)
                .await
                .map_err(|e| ContenderError::with_err(e, "failed to retrieve nonce from RPC"))?;
            send.send((addr, nonce))
                .await
                .map_err(|e| ContenderError::with_err(e, "(mpsc) failed to send nonce"))?;
            Ok::<_, ContenderError>(())
        }));
    }

    for task in tasks {
        if let Err(e) = task.await {
            eprintln!("failed to sync nonce: {e:?}");
        }
    }
    receiver.close();

    println!("waiting for nonces to sync...");
    while let Some((addr, nonce)) = receiver.recv().await {
        nonces.insert(addr, nonce);
    }

    Ok(())
}

impl<D, S, P> Generator<String, D, P> for TestScenario<D, S, P>
where
    D: DbOps + Send + Sync,
    S: Seeder,
    P: PlanConfig<String> + Templater<String> + Send + Sync,
{
    fn get_db(&self) -> &D {
        self.db.as_ref()
    }

    fn get_templater(&self) -> &P {
        &self.config
    }

    fn get_plan_conf(&self) -> &impl PlanConfig<String> {
        &self.config
    }

    fn get_fuzz_seeder(&self) -> &impl Seeder {
        &self.rand_seed
    }

    fn get_agent_store(&self) -> &AgentStore {
        &self.agent_store
    }

    fn get_rpc_url(&self) -> String {
        self.rpc_url.to_string()
    }
}

struct SpamContextHandler {
    add_gas: tokio::sync::mpsc::Sender<u128>,
    success_send_tx: tokio::sync::mpsc::Sender<()>,
}

#[cfg(test)]
pub mod tests {
    use crate::agent_controller::{AgentStore, SignerStore};
    use crate::db::MockDb;
    use crate::generator::named_txs::ExecutionRequest;
    use crate::generator::templater::Templater;
    use crate::generator::types::{
        CreateDefinition, FunctionCallDefinition, FuzzParam, SpamRequest,
    };
    use crate::generator::{types::PlanType, util::test::spawn_anvil, RandSeed};
    use crate::generator::{Generator, PlanConfig};
    use crate::spammer::util::test::get_test_signers;
    use crate::test_scenario::TestScenario;
    use crate::Result;
    use alloy::consensus::constants::GWEI_TO_WEI;
    use alloy::hex::ToHexExt;
    use alloy::node_bindings::AnvilInstance;
    use alloy::primitives::{Address, U256};
    use std::collections::HashMap;
    use tokio::sync::OnceCell;

    use super::TestScenarioParams;

    // separate prometheus registry for simulations; anvil doesn't count!
    static PROM: OnceCell<prometheus::Registry> = OnceCell::const_new();
    static HIST: OnceCell<prometheus::HistogramVec> = OnceCell::const_new();

    #[derive(Clone)]
    pub struct MockConfig;

    pub const COUNTER_BYTECODE: &str =
        "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122010f3077836fb83a22ad708a23102f2b487523767e1afef5a93c614619001648b64736f6c63430008170033";
    pub const UNI_V2_FACTORY_BYTECODE: &str = "{_sender}";

    impl PlanConfig<String> for MockConfig {
        fn get_env(&self) -> Result<HashMap<String, String>> {
            Ok(HashMap::<String, String>::from_iter([
                ("test1".to_owned(), "0xbeef".to_owned()),
                ("test2".to_owned(), "0x9001".to_owned()),
            ]))
        }

        fn get_create_steps(&self) -> Result<Vec<CreateDefinition>> {
            Ok(vec![
                CreateDefinition {
                    bytecode: COUNTER_BYTECODE.to_string(),
                    name: "test_counter".to_string(),
                    from: Some("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266".to_owned()),
                    from_pool: None,
                },
                CreateDefinition {
                    bytecode: COUNTER_BYTECODE.to_string(),
                    name: "test_counter2".to_string(),
                    from: None,
                    from_pool: Some("admin1".to_owned()),
                },
                CreateDefinition {
                    bytecode: COUNTER_BYTECODE.to_string(),
                    name: "test_counter3".to_string(),
                    from: None,
                    from_pool: Some("admin2".to_owned()),
                },
                CreateDefinition {
                    bytecode: UNI_V2_FACTORY_BYTECODE.to_string(),
                    name: "univ2_factory".to_string(),
                    from: None,
                    from_pool: Some("admin1".to_owned()),
                },
                CreateDefinition {
                    bytecode: UNI_V2_FACTORY_BYTECODE.to_string(),
                    name: "univ2_factory".to_string(),
                    from: Some("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266".to_owned()),
                    from_pool: None,
                },
            ])
        }

        fn get_setup_steps(&self) -> Result<Vec<FunctionCallDefinition>> {
            Ok(vec![
                FunctionCallDefinition {
                    to: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D".to_owned(),
                    from: Some("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266".to_owned()),
                    from_pool: None,
                    value: Some("4096".to_owned()),
                    signature: "swap(uint256 x, uint256 y, address a, bytes b)".to_owned(),
                    args: vec![
                        "1".to_owned(),
                        "2".to_owned(),
                        Address::repeat_byte(0x11).encode_hex(),
                        "0xdead".to_owned(),
                    ]
                    .into(),
                    fuzz: None,
                    kind: None,
                    gas_limit: None,
                },
                FunctionCallDefinition {
                    to: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D".to_owned(),
                    from: Some("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266".to_owned()),
                    from_pool: None,
                    value: Some("0x1000".to_owned()),
                    signature: "swap(uint256 x, uint256 y, address a, bytes b)".to_owned(),
                    args: vec![
                        "1".to_owned(),
                        "2".to_owned(),
                        Address::repeat_byte(0x11).encode_hex(),
                        "0xbeef".to_owned(),
                    ]
                    .into(),
                    fuzz: None,
                    kind: None,
                    gas_limit: None,
                },
                FunctionCallDefinition {
                    to: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D".to_owned(),
                    from: None,
                    from_pool: Some("pool1".to_owned()),
                    value: None,
                    signature: "increment()".to_owned(),
                    args: vec![].into(),
                    fuzz: None,
                    kind: None,
                    gas_limit: None,
                },
            ])
        }

        fn get_spam_steps(&self) -> Result<Vec<SpamRequest>> {
            Ok(vec![
                SpamRequest::Tx(FunctionCallDefinition {
                    to: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D".to_owned(),
                    from: None,
                    from_pool: Some("pool1".to_owned()),
                    value: None,
                    signature: "swap(uint256 x, uint256 y, address a, bytes b)".to_owned(),
                    args: vec![
                        "1".to_owned(),
                        "2".to_owned(),
                        // {_sender} will be replaced with the `from` address
                        "{_sender}".to_owned(),
                        "0xd00d".to_owned(),
                    ]
                    .into(),
                    fuzz: vec![FuzzParam {
                        param: Some("x".to_string()),
                        value: None,
                        min: None,
                        max: None,
                    }]
                    .into(),
                    kind: None,
                    gas_limit: None,
                }),
                SpamRequest::Tx(FunctionCallDefinition {
                    to: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D".to_owned(),
                    from: None,
                    from_pool: Some("pool2".to_owned()),
                    value: None,
                    signature: "swap(uint256 x, uint256 y, address a, bytes b)".to_owned(),
                    args: vec![
                        "1".to_owned(),
                        "2".to_owned(),
                        // {_sender} will be replaced with the `from` address
                        "{_sender}".to_owned(),
                        "0xd00d".to_owned(),
                    ]
                    .into(),
                    fuzz: vec![FuzzParam {
                        param: Some("x".to_string()),
                        value: None,
                        min: None,
                        max: None,
                    }]
                    .into(),
                    kind: None,
                    gas_limit: None,
                }),
                SpamRequest::Tx(FunctionCallDefinition {
                    to: "0x00000000000000000000000000000000f007ba11".to_owned(),
                    from: None,
                    from_pool: Some("pool2".to_owned()),
                    value: None,
                    signature: "swap(uint256 x, uint256 y, address a, bytes b)".to_owned(),
                    args: vec![
                        "1".to_owned(),
                        "2".to_owned(),
                        // {_sender} will be replaced with the `from` address
                        "{_sender}".to_owned(),
                        "0xd00d".to_owned(),
                    ]
                    .into(),
                    fuzz: vec![FuzzParam {
                        param: Some("x".to_string()),
                        value: None,
                        min: None,
                        max: None,
                    }]
                    .into(),
                    kind: None,
                    gas_limit: Some(100_000),
                }),
            ])
        }
    }

    impl Templater<String> for MockConfig {
        fn copy_end(&self, input: &str, _last_end: usize) -> String {
            input.to_owned()
        }
        fn replace_placeholders(
            &self,
            input: &str,
            _placeholder_map: &std::collections::HashMap<String, String>,
        ) -> String {
            input.to_owned()
        }
        fn terminator_start(&self, _input: &str) -> Option<usize> {
            None
        }
        fn terminator_end(&self, _input: &str) -> Option<usize> {
            None
        }
        fn num_placeholders(&self, _input: &str) -> usize {
            0
        }
        fn find_key(&self, _input: &str) -> Option<(String, usize)> {
            None
        }
    }

    pub async fn get_test_scenario(
        anvil: &AnvilInstance,
        txs_per_duration: u64,
        fund_amount_eth: f64,
    ) -> TestScenario<MockDb, RandSeed, MockConfig> {
        let seed = RandSeed::seed_from_bytes(&[0x01; 32]);
        let tx_type = alloy::consensus::TxType::Eip1559;
        let signers = get_test_signers();

        let mut agents = AgentStore::new();
        let config = MockConfig;
        let num_pools = config.get_spam_pools().len().max(1) as u64;
        println!("spam pools: {num_pools}, txs_per_duration: {txs_per_duration}");
        agents.init(
            &["pool1", "pool2"],
            (txs_per_duration / num_pools) as usize,
            &seed,
        );

        let admin1_signers = SignerStore::new(1, &seed, "admin1");
        let admin2_signers = SignerStore::new(1, &seed, "admin2");
        agents.add_agent("admin1", admin1_signers);
        agents.add_agent("admin2", admin2_signers);

        let mut scenario = TestScenario::new(
            config,
            MockDb.into(),
            seed.to_owned(),
            TestScenarioParams {
                rpc_url: anvil.endpoint_url(),
                builder_rpc_url: None,
                signers,
                agent_store: agents,
                tx_type,
                gas_price_percent_add: None,
                pending_tx_timeout_secs: 12,
            },
            None,
            (&PROM, &HIST),
        )
        .await
        .unwrap();

        let fund_amount_wei = U256::from(fund_amount_eth * 1e18);
        println!("fund_amount_wei: {fund_amount_wei}");
        println!("fund_amount_eth: {fund_amount_eth}");

        let all_agent_names = scenario
            .agent_store
            .all_agents()
            .map(|(name, _)| name.to_owned())
            .collect::<Vec<_>>();
        for agent_name in &all_agent_names {
            println!(
                "funding agent: {agent_name} (num signers: {})",
                scenario
                    .agent_store
                    .get_agent(agent_name)
                    .unwrap()
                    .signers
                    .len()
            );
            scenario
                .fund_agent_signers(agent_name, &anvil.wallet().unwrap(), fund_amount_wei)
                .await
                .unwrap();
        }

        scenario
    }

    #[tokio::test]
    async fn it_creates_scenarios() -> std::result::Result<(), Box<dyn std::error::Error>> {
        let anvil = spawn_anvil();
        let scenario = get_test_scenario(&anvil, 10, 10.0).await;

        let create_txs = scenario
            .load_txs(PlanType::Create(|tx| {
                println!("create tx callback triggered! {tx:?}\n");
                Ok(None)
            }))
            .await?;
        assert_eq!(create_txs.len(), 5);

        let setup_txs = scenario
            .load_txs(PlanType::Setup(|tx| {
                println!("setup tx callback triggered! {tx:?}\n");
                Ok(None)
            }))
            .await?;
        assert_eq!(setup_txs.len(), 3);

        let spam_txs = scenario
            .load_txs(PlanType::Spam(20, |tx| {
                println!("spam tx callback triggered! {tx:?}\n");
                Ok(None)
            }))
            .await?;

        // should round up to nearest multiple of 3 (3 spam steps in config, 20 txs requested)
        assert_eq!(spam_txs.len(), 21);
        Ok(())
    }

    #[tokio::test]
    async fn gas_limit_override_works() {
        let anvil = spawn_anvil();
        let scenario = get_test_scenario(&anvil, 10, 10.0).await;
        let spam_txs = scenario
            .load_txs(PlanType::Spam(20, |tx| {
                println!("spam tx callback triggered! {tx:?}\n");
                Ok(None)
            }))
            .await
            .unwrap();
        let tx = spam_txs
            .iter()
            .find(|tx| match tx {
                ExecutionRequest::Tx(tx) => {
                    *tx.tx.to.unwrap().to().unwrap()
                        == "0x00000000000000000000000000000000f007ba11"
                            .parse::<Address>()
                            .unwrap()
                }
                _ => false,
            })
            .unwrap();
        match tx {
            ExecutionRequest::Tx(tx) => {
                assert_eq!(tx.tx.gas, Some(100_000));
            }
            _ => panic!("expected tx"),
        }
    }

    #[tokio::test]
    async fn fncall_replaces_sender_placeholder_with_from_address() {
        let anvil = spawn_anvil();
        let scenario = get_test_scenario(&anvil, 10, 10.0).await;

        let spam_txs = scenario
            .load_txs(PlanType::Spam(10, |tx| {
                println!("spam tx callback triggered! {tx:?}\n");
                Ok(None)
            }))
            .await
            .unwrap();
        let spam_tx = &spam_txs[0];
        let tx = match spam_tx {
            ExecutionRequest::Tx(tx) => tx,
            _ => panic!("expected tx"),
        };
        let from = tx.tx.from.unwrap();
        let input = tx.tx.input.input.as_ref().unwrap();
        println!("input: {input}");
        println!("from: {}", from.encode_hex());
        assert!(input.encode_hex().contains(&from.encode_hex()));
    }

    #[tokio::test]
    async fn create_replaces_sender_placeholder_with_from_address() {
        let anvil = spawn_anvil();
        let scenario = get_test_scenario(&anvil, 10, 10.0).await;

        let txs = scenario
            .load_txs(PlanType::Create(|tx| {
                println!("create tx callback triggered! {tx:?}\n");
                Ok(None)
            }))
            .await
            .unwrap();
        for tx in &txs[3..4] {
            let tx = match tx {
                ExecutionRequest::Tx(tx) => tx,
                _ => panic!("expected tx"),
            };
            let from = tx.tx.from.unwrap();
            let input = tx.tx.input.input.as_ref().unwrap();
            println!("input: {input}");
            println!("from: {}", from.encode_hex());
            assert!(input.encode_hex().contains(&from.encode_hex()));
        }
    }

    #[tokio::test]
    async fn create_steps_use_agent_signers() {
        let anvil = spawn_anvil();
        let scenario = get_test_scenario(&anvil, 10, 10.0).await;

        // assert that the agent store has the correct number of signers
        let create_steps = scenario
            .load_txs(PlanType::Create(|_| Ok(None)))
            .await
            .unwrap();
        let mut used_agent_keys = 0;
        for step in create_steps {
            let tx = match step {
                ExecutionRequest::Tx(tx) => tx,
                _ => continue,
            };
            if tx.tx.from.is_some() {
                assert!(scenario.wallet_map.contains_key(&tx.tx.from.unwrap()));
            }
            assert!(scenario.agent_store.has_agent("admin1"));
            assert!(scenario.agent_store.has_agent("admin2"));
            let admin_pools = ["admin1", "admin2"];
            for pool in admin_pools {
                if scenario
                    .agent_store
                    .get_agent(pool)
                    .unwrap()
                    .signers
                    .iter()
                    .map(|s| s.address())
                    .collect::<Vec<_>>()
                    .contains(&tx.tx.from.unwrap())
                {
                    used_agent_keys += 1;
                }
            }
        }
        assert_eq!(used_agent_keys, 3);
    }

    #[tokio::test]
    async fn setup_steps_use_agent_signers() {
        let anvil = spawn_anvil();
        let mut scenario = get_test_scenario(&anvil, 10, 10.0).await;
        scenario.deploy_contracts().await.unwrap();
        let setup_steps = scenario
            .load_txs(PlanType::Setup(|_| Ok(None)))
            .await
            .unwrap();
        scenario.run_setup().await.unwrap();
        let mut used_agent_keys = 0;
        for step in setup_steps {
            let tx = match step {
                ExecutionRequest::Tx(tx) => tx,
                _ => continue,
            };
            let from = tx.tx.from.unwrap();
            assert!(scenario.wallet_map.contains_key(&from));
            assert!(scenario.agent_store.has_agent("pool1"));
            if scenario
                .agent_store
                .get_agent("pool1")
                .unwrap()
                .signers
                .iter()
                .map(|s| s.address())
                .collect::<Vec<_>>()
                .contains(&from)
            {
                used_agent_keys += 1;
            }
        }
        assert_eq!(used_agent_keys, 1);
    }

    #[tokio::test]
    async fn scenario_creates_contracts() {
        let anvil = spawn_anvil();
        let mut scenario = get_test_scenario(&anvil, 10, 10.0).await;
        let res = scenario.deploy_contracts().await;
        assert!(res.is_ok());
    }

    #[tokio::test]
    async fn scenario_runs_setup() {
        let anvil = spawn_anvil();
        let mut scenario = get_test_scenario(&anvil, 10, 10.0).await;
        scenario.deploy_contracts().await.unwrap();
        let res = scenario.run_setup().await;
        println!("{res:?}");
        assert!(res.is_ok());
    }

    #[tokio::test]
    async fn setup_cost_estimates_are_correct(
    ) -> std::result::Result<(), Box<dyn std::error::Error>> {
        let anvil = spawn_anvil();
        let scenario = get_test_scenario(&anvil, 10, 10.0).await;
        let cost = scenario.estimate_setup_cost().await?;
        let total_txs = scenario.config.get_setup_steps().unwrap().len()
            + scenario.config.get_create_steps().unwrap().len();
        let expected_cost_min = U256::from(GWEI_TO_WEI * 21000 * total_txs as u64); // assuming gas price is 1 gwei and txs are cheap
        assert!(cost > expected_cost_min);
        Ok(())
    }

    #[tokio::test]
    async fn all_tx_requests_are_contiguous() -> std::result::Result<(), Box<dyn std::error::Error>>
    {
        let anvil = spawn_anvil();
        let txs_per_duration = 500u64;
        let duration = 3;
        let mut scenario = get_test_scenario(&anvil, txs_per_duration, 0.01).await;

        // make tx chunks
        let tx_req_chunks = scenario
            .get_spam_tx_chunks(txs_per_duration, duration)
            .await?;

        // test chunk size & count
        assert_eq!(tx_req_chunks.len(), duration as usize);
        for chunk in tx_req_chunks.iter() {
            assert_eq!(chunk.len(), txs_per_duration as usize);
        }

        // prepare tx requests & collect them all into a single array
        let mut prepared_txs: Vec<crate::spammer::ExecutionPayload> = vec![];
        for chunk in tx_req_chunks {
            let tx_reqs = scenario.prepare_spam(&chunk).await?;
            prepared_txs.extend(tx_reqs);
        }

        // group prepared_txs by `from` address, then sort each group by nonce, then assert that all nonces are contiguous (no gaps)
        let mut grouped_txs = std::collections::HashMap::new();
        for tx in &prepared_txs {
            match tx {
                crate::spammer::ExecutionPayload::SignedTx(_, tx_req) => {
                    let from = tx_req.tx.from.unwrap();
                    let nonce = tx_req.tx.nonce.unwrap();
                    grouped_txs.entry(from).or_insert_with(Vec::new).push(nonce);
                }
                crate::spammer::ExecutionPayload::SignedTxBundle(_, _) => {
                    // ignore
                }
            }
        }
        for (from, nonces) in grouped_txs {
            let mut nonces = nonces;
            nonces.sort();
            let mut prev_nonce = nonces[0];
            let mut min_nonce = prev_nonce;
            let mut max_nonce = prev_nonce;
            for nonce in &nonces[1..] {
                assert_eq!(prev_nonce + 1, *nonce);
                prev_nonce = *nonce;
                if *nonce < min_nonce {
                    min_nonce = *nonce;
                }
                if *nonce > max_nonce {
                    max_nonce = *nonce;
                }
            }
            println!("({from}) min_nonce: {min_nonce}, max_nonce: {max_nonce}");
        }

        Ok(())
    }
}
